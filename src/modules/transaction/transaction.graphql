scalar DateTime

type Transaction {
    id: ID!
    type: String!
    symbol: String!
    quantity: Float!
    pricePerUnit: Float!
    totalAmount: Float!
    transactionDate: DateTime!
    createdAt: DateTime!
    updatedAt: DateTime!
    user: User!
}

input CreateTransactionInput {
    type: String!
    symbol: String!
    quantity: Float!
    pricePerUnit: Float!
    totalAmount: Float!
    transactionDate: DateTime!
    userId: ID!
}

input UpdateTransactionInput {
    id: ID!
    type: String
    symbol: String
    quantity: Float
    pricePerUnit: Float
    totalAmount: Float
    transactionDate: DateTime
    userId: ID
}

type Query {
    getTransactions: [Transaction!]!
    getTransaction(id: ID!): Transaction
}

type Mutation {
    createTransaction(createTransactionInput: CreateTransactionInput!): Transaction!
    updateTransaction(updateTransactionInput: UpdateTransactionInput!): Transaction!
    removeTransaction(id: ID!): Transaction
}
